For the record...

note that this shared project has revit specific usage - 
This cannot be used by projects that do not reference
revit libraries

DataStorage:  the element is the shell for the Ex Storage Entity.
Entity: stored in a DataStorage element.  holds the actual data
Schema: the definition of the data stored in the entity
Field: compnents of Schema that defines the data items









Additional saved / reference information:

Extension Data Information

App
Version
Company (i.e. "CyberStudio")
Description (i.e. "Rows Root Data")

Array of "Row Data"


Row Data
Name
Version
Description
Sequence
Update Rule
Row Family Name
Skip
Excel File Name
Excel worksheet Name



Family Data / Parameters
Identiy Data
	Name
	Sequence
	Description
	HasError
Data
	Param
	Name				Contents
	Label #1			Arbitrary name / Description / nothing
	#1 Formula			Label Formula
	#1 Data Type		The type of data for the final value
	#1 Formatting Info	How to format the Data
	#1 Skip				Switch to not update the label
Visibility
	Row Data Vilibility	Turn on / off the visibility of the row Identiy labels








Saved information from prior attempts - may no longer apply:

/*
 * process:
 *  config
 *   +-> finds info -> read info.
 *   +-> not find info -> create info -> write info
 *
 * make root path
 * makeroot()-> DsMgr.CreateDataStorage<-
 *           +> WriteRoot-> xsHlpr.WriteRootData -> makeRootSchema -> makeSchemaDef <-
 *                                                                 +> makeSchemaFields -> makeSchemaField <-
 *                                               +> writeData <-
 *
 *
 *
 * note: since a schema is immutable, the subschema (rows) cannot
 * be modified / deleted 
 *
 * procedures
 * startup
 *  +> ExMgr
 *     +> initialize()
 *        * init to true
 *        * status to INIT
 *     +> config()
 *        * status is INIT
 *        +> dsExists == true // note that ds and root get setup together
 *           +> rootExists == true // root can exist separate from app & row
 *              +> appExists == true // note that app / row will be all config'd together
 *                 * proceed "normal"
 *                   * status to READY
 *              +> appExists == false
 *                 * need row information to proceed
 *                   * status to NEED_APP_ROW
 *           +> rootExists == false
 *              * this should never happen as ds and root get setup together
 *                * status to FAIL
 *       +> dsExists == false
 *          * need to setup system
 *            * status to NEED_CONFIG
 *
 * startup
 *  +> start ExMgr
 *     +> status == READY -> proceed normal -> flip buttons
 *     +> status == INIT -> should never happen -> report program failure - exit
 *     +> status == FAIL -> should never happen -> report program failure - exit
 *     +> status == NEED_APP_ROW -> flip buttons
 *     +> status == NEED_CONFIG -> flip buttons
 *
 *  buttons (on a dialog box)
 *                        button             
 *                        off unless         
 *                        status             
 *  * initialize          is NEED_CONFIG     
 *  * add row			  is NEED_APP_ROW or
 *                        is READY
 *  * show root info	  is READY
 *  * show app info		  is READY
 *    * show row info	  is READY
 *  * show all row info  is READY
 *  * modify row		  is READY
 *  * delete row		  is READY
 *  * remove system		  is READY
 *
 *			
 *			
 * function							datastore (ds)
 *					init	confg	root	app		root		app	
 *					req'd	req'd	exists	exists	exists		exists	
 *
 * initialize		false	n/a		n/a		n/a		n/a			n/a
 * configure		true	false	n/a		n/a		n/a			n/a		tests ds / root / app exists
 *
 * Create ds		true	false	false	n/a		n/a			n/a
 *
 * Read root		n/a		n/a		true			n/a			n/a		true ds == init / config true
 * Read app			n/a		n/a		n/a				true		false	true root exist == init / confg / ds true
 * Read rows		n/a		n/a		n/a				true		true	true root exist == init / confg / ds true
 * write root		n/a		n/a		true			false		n/a		true ds == init / config true
 * write app +		n/a		n/a		n/a				true		n/a		true root exist == init / confg / ds true
 *	rows
 * update root		-- n/a -						 not permitted
 * update app +		n/a		n/a		n/a				true 		n/a		true root exist == init true
 * 	rows
 * del root			n/a		n/a		n/a				true		false	false app exist == false row(s) exist / true root exists == init / confg / ds true
 * del app +		n/a		n/a		n/a				n/a			true	true app exists == init / confg / ds true
 *  row(s)
 *
 * ds exists		true	false	false			n/a			n/a
 * root exists		na		n/a		true			false		n/a		
 * app exists		n/a		n/a		n/a				true		false
 *
 * **	row(s) exist	n/a							n/a			true	** probably do not need
 */

